"""
Django settings for omzit_personal project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.getenv("DJANGO_DEBUG", "0") == "1"

DEBUG = True

# ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS").split()
ALLOWED_HOSTS = ['192.168.8.163', '192.168.8.30', '127.0.0.1']

INTERNAL_IPS = ["127.0.0.1", ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'debug_toolbar',
    'django_filters',
    'django_apscheduler',

    'timesheet.apps.TimesheetConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'omzit_personal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates', os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'omzit_personal.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'personal',
        'USER': 'admin',
        'PASSWORD': 'Epass1',
        'HOST': '127.0.0.1',
        # 'HOST': '192.168.8.163',
        # 'HOST': '192.168.8.30'
        'PORT': '',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv("DJANGO_DB_NAME"),
#         'USER': os.getenv("DJANGO_DB_USER"),
#         'PASSWORD': os.getenv("DJANGO_DB_PASSWORD"),
#         'HOST': os.getenv("DJANGO_DB_HOST"),
#         # 'HOST': '192.168.8.163'
#         # 'HOST': '192.168.8.30'
#         'PORT': '',
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Asia/Omsk'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = 'static/'
# STATIC_ROOT = BASE_DIR / "static"

STATIC_URL = r'/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')



# MEDIA_URL = "media/"
# MEDIA_ROOT = BASE_DIR / "media"

MEDIA_URL = '/files/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'files')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {
#         "console": {
#             "()": "colorlog.ColoredFormatter",
#             "format": "%(blue)s%(asctime)s: %(log_color)s%(levelname)-8s%(reset)s %(module)-4s %(lineno)-4s %(message)s",
#             "log_colors": {
#                 'DEBUG': 'cyan',
#                 'INFO': 'green',
#                 'WARNING': 'yellow',
#                 'ERROR': 'red',
#                 'CRITICAL': 'red,bg_white',
#             },
#         },
#         "file": {
#             "format": "%(asctime)s %(levelname)-12s %(module)-12s %(lineno)-12s %(message)s",
#         }
#     },
#     "handlers": {
#         "console": {
#             "level": "DEBUG",
#             "class": "logging.StreamHandler",
#             "formatter": "console",
#         },
#         "file_debug": {
#             "level": "DEBUG",
#             "class": "logging.FileHandler",
#             "formatter": "file",
#             "filename": os.path.join("logs", "debug.log"),
#         },
#         "file_prod": {
#             "level": "INFO",
#             "class": "logging.FileHandler",
#             "formatter": "file",
#             "filename": os.path.join("logs", "production.log"),
#         }
#     },
#     "loggers": {
#         "logger": {
#             "handlers": ["console", "file_prod"],
#             "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
#         },
#         "": {
#             "handlers": ["file_debug"],
#             "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
#         },
#     },
# }

APSCHEDULER_DATETIME_FORMAT = 'd.m.Y H:i:s'
APSCHEDULER_RUN_NOW_TIMEOUT = 25
