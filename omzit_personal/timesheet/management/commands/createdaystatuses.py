import logging

from django.core.management.base import BaseCommand

from timesheet.models import DayStatus

logger = logging.getLogger("logger")

STATUSES = {
    "Б": "Больничный",
    "В": "Выходные дни",
    "ВЧ": "Вечерние часы",
    "ВП": "Простой по вине работника",
    "ВМ": "Вахта",
    "Г": "Выполнение гос. обязанностей",
    "ДБ": "Отпуск без ЗП",
    "ДО": "Неоплачиваемый отпуск с разрешения работодателя (административный)",
    "ЗБ": "Забастовка",
    "К": "Командировка",
    "КР": "Перерывы для кормления ребёнка",
    "Л": "Сокращенное рабочее время в соответствии с законом",
    "Н": " Ночные часы",
    "НБ": "Отстранение от работы без оплаты",
    "НС": "Работа в режиме неполного рабочего времени",
    "НН": "Неявки по невыясненным причинам",
    "НП": "Простой не зависящий от работодателя и работника",
    "НО": "Отстранение от работы с оплатой",
    "НЗ": "Приостановка работы в случае задержки выплаты ЗП",
    "НВ": "Дополнительные неоплачиваемые выходные",
    "ОЖ": "Отпуск по уходу за ребёнком",
    "ОВ": "Дополнительные оплачиваемые выходные",
    "ОЗ": "Отпуск неоплачиваемый в соответствии с законом",
    "ОТ": "Отпуск",
    "ОН": "Оплачиваемые нерабочие дни",
    "ОД": "Дополнительный отпуск",
    "ПВ": "Время вынужденного прогула",
    "ПМ": "Повышение квалификации в другой местности",
    "ПР": "Прогул",
    "ПК": "Повышение квалификации",
    "Р": "Отпуск по беременности и родам",
    "РП": "Время простоя по вине работодателя",
    "РВ": "Праздники",
    "С": "Сверхурочно",
    "Т": "Неоплачиваемый больничный",
    "У": "Отпуск дополнительный (оплачиваемый ученический) ",
    "УД": "Отпуск дополнительный (неоплачиваемый ученический)",
    "УВ": "Сокращенное время обучающихся без отрыва от производства",
}


class Command(BaseCommand):
    help = "Создать базу статусов"

    def handle(self, *args, **options):
        statuses = []
        for symbol, name in STATUSES.items():
            employee = DayStatus(symbol=symbol, name=name)
            statuses.append(employee)
        DayStatus.objects.all().delete()
        DayStatus.objects.bulk_create(statuses)
        logger.info(f"Создано {len(statuses)} статусов в БД")
